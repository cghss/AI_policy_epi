group_by(WHO_Region) %>%
summarize(percentage_yes = mean(Match == "Yes") * 100)
data_for_plot <- ai.data %>%
group_by(WHO_Region, Match) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100) %>%
ungroup()
ggplot(data_for_plot, aes(x = WHO_Region, y = percentage, fill = Match)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values =c("#41b989", "#ffb896", "#bb5b3f", "#156d7d")) +
labs(
x = "WHO Region",
y = "Percentage",
fill = "Concordance"
) +
theme_minimal()
ggplot(data_for_plot, aes(x = WHO_Region, y = percentage, fill = Match)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values =c("#bb5b3f", "#ffb896", "#41b989", "#156d7d")) +
labs(
x = "WHO Region",
y = "Percentage",
fill = "Concordance"
) +
theme_minimal()
data_for_plot_filtered <- ai.filtered %>%
group_by(WHO_Region, Match) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100) %>%
ungroup()
ggplot(data_for_plot_filtered, aes(x = WHO_Region, y = percentage, fill = Match)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values =c("#bb5b3f", "#ffb896", "#41b989", "#156d7d")) +
labs(
x = "WHO Region",
y = "Percentage",
fill = "Match Response"
) +
theme_minimal()
qi.filtered.percentage.by.region <- QI.data %>%
group_by(WHO_Region) %>%
summarize(percentage_yes = mean(Match == "Yes") * 100)
View(qi.filtered.percentage.by.region)
ggplot(data_for_plot, aes(x = WHO_Region, y = percentage, fill = Match)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values =c("#bb5b3f", "#ffb896", "#41b989", "#156d7d")) +
scale_x_discrete(labels = function(x) ifelse(x == "AMRO", "PAHO", x)) +
labs(
x = "WHO Region",
y = "Percentage",
fill = "Concordance"
) +
theme_minimal()
ggplot(data_for_plot_filtered, aes(x = WHO_Region, y = percentage, fill = Match)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values =c("#bb5b3f", "#ffb896", "#41b989", "#156d7d")) +
scale_x_discrete(labels = function(x) ifelse(x == "AMRO", "PAHO", x)) +
labs(
x = "WHO Region",
y = "Percentage",
fill = "Match Response"
) +
theme_minimal()
english_countries_yes <- QI.data %>%
filter(English == "YES")
english_countries_no <- QI.data %>%
filter(English == "NO")
View(english_countries_yes)
# Calculate the percentage of English-speaking countries with Concordance
percentage_english_concordance_yes <- mean(english_countries_yes$Concordance %in% c("Yes", "No - Provides More Info")) * 100
print(percentage_english_concordance_yes)
# Calculate the percentage of non-English-speaking countries with Concordance
percentage_english_concordance_no <- mean(english_countries_no$Concordance %in% c("Yes", "No - Provides More Info")) * 100
print(percentage_english_concordance_no)
one.map <- ggplot() +
geom_sf(data = one.data, aes(fill = Match, geometry = geometry), color = "black", size = 0.2) +
scale_fill_manual(values = c("#41b989", "#ffb896", "#bb5b3f", "#156d7d", "white"),
na.value = "white",
guide = guide_legend(override.aes = list(fill = c("#41b989", "#ffb896", "#bb5b3f", "#156d7d", "white")))) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.title = element_blank()
)
print(one.map) #Childhood vaccination
two.map <- ggplot() +
geom_sf(data = two.data, aes(fill = Match, geometry = geometry),color = "black", size = 0.2) +
theme_minimal() +
scale_fill_manual(values = c("#41b989", "#ffb896", "#bb5b3f", "#156d7d", "white"),
na.value = "white",
guide = guide_legend(override.aes = list(fill = c("#41b989", "#ffb896", "#bb5b3f", "#156d7d", "white")))) +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.title = element_blank())
print(two.map) #Emergency vaxx
iso.map <- ggplot() +
geom_sf(data = iso.data, aes(fill = Concordance, geometry = geometry),color = "black", size = 0.2) +
theme_minimal() +
scale_fill_manual(values = c("#41b989", "#ffb896", "#bb5b3f", "#156d7d", "white"),
na.value = "white",
guide = guide_legend(override.aes = list(fill = c("#41b989", "#ffb896", "#bb5b3f", "#156d7d", "white")))) +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.title = element_blank())
print(iso.map) #Iso Q1
qur.map <- ggplot() +
geom_sf(data = qur.data, aes(fill = Concordance, geometry = geometry),color = "black", size = 0.2) +
theme_minimal() +
scale_fill_manual(values = c("#41b989", "#ffb896", "#bb5b3f", "#156d7d", "white"),
na.value = "white",
guide = guide_legend(override.aes = list(fill = c("#41b989", "#ffb896", "#bb5b3f", "#156d7d", "white")))) +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.title = element_blank())
print(qur.map) #Quar Q6
#Q+I Bar
library(readr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(patchwork)
#load data
QI.data <- read.csv("QIDataClean.csv")
QI.data <- QI.data %>%
filter(!is.na(WHO_Region))
# List of English-speaking countries
english_countries <- c(
"Antigua and Barbuda", "Australia", "Bahamas", "Barbados", "Belize",
"Bhutan", "Botswana", "Brunei Darussalam", "Cameroon", "Canada",
"Chinese Taipei (Taiwan; Republic of China; ROC)", "Cook Islands", "Dominica",
"Eswatini (Swaziland)", "Fiji", "Gambia (Republic of The)", "Ghana", "Grenada",
"Guyana", "India", "Ireland", "Jamaica", "Kenya", "Kiribati", "Lesotho",
"Liberia", "Malawi", "Malaysia", "Malta", "Marshall Islands", "Mauritius",
"Micronesia (Federated States of Micronesia)", "Namibia", "Nauru", "Nepal",
"New Zealand", "Nigeria", "Niue", "Pakistan", "Palau", "Papua New Guinea",
"Philippines", "Saint Kitts and Nevis (St Kitts and Nevis)", "Saint Lucia (St Lucia)",
"Saint Vincent and the Grenadines (St Vincent and the Grenadines)", "Samoa",
"Seychelles", "Sierra Leone", "Singapore", "Solomon Islands", "South Africa",
"Sri Lanka", "Tonga", "Trinidad and Tobago", "Tuvalu", "Uganda",
"United Kingdom of Great Britain and Northern Ireland (UK)", "United Republic of Tanzania",
"United States of America (USA)", "Vanuatu", "Zambia", "Zimbabwe"
)
# Add the 'English' column to QIData
QI.data <- QI.data %>%
mutate(English = ifelse(Country %in% english_countries, "YES", "NO"))
gross.percentage.yes <- mean(QI.data$Concordance == "Yes") * 100
print(gross.percentage.yes)
qi.filtered.percentage.by.region <- QI.data %>%
group_by(WHO_Region) %>%
summarize(percentage_yes = mean(Match == "Yes") * 100)
english_countries_yes <- QI.data %>%
filter(English == "YES")
english_countries_no <- QI.data %>%
filter(English == "NO")
# Calculate the percentage of English-speaking countries with Concordance
percentage_english_concordance_yes <- mean(english_countries_yes$Concordance %in% c("Yes", "No - Provides More Info")) * 100
print(percentage_english_concordance_yes)
# Calculate the percentage of non-English-speaking countries with Concordance
percentage_english_concordance_no <- mean(english_countries_no$Concordance %in% c("Yes", "No - Provides More Info")) * 100
print(percentage_english_concordance_no)
percentage.by.region <- QI.data %>%
group_by(WHO_Region) %>%
summarize(percentage_yes = mean(Concordance == "Yes") * 100)
data_for_plot <- QI.data %>%
group_by(WHO_Region, Concordance) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100) %>%
ungroup()
QIBar <- ggplot(data_for_plot, aes(x = WHO_Region, y = percentage, fill = Concordance)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(
values = c("#41b989", "#ffb896","#bb5b3f","#156d7d")) +
scale_x_discrete(labels = function(x) ifelse(x == "AMRO", "PAHO", x)) +
labs(
x = "WHO Region",
y = "Percentage",
fill = "Concordance Response"
) +
theme_minimal()
print(QIBar)
QIBar <- ggplot(data_for_plot, aes(x = WHO_Region, y = percentage, fill = Concordance)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values =c("#bb5b3f", "#ffb896", "#41b989", "#156d7d")) +
scale_x_discrete(labels = function(x) ifelse(x == "AMRO", "PAHO", x)) +
labs(
x = "WHO Region",
y = "Percentage",
fill = "Concordance Response"
) +
theme_minimal()
print(QIBar)
library(tidyr)
library(readr)
library(dplyr)
library(rnaturalearth)
library(ggplot2)
#call data
ai.data <- read.csv("AIDataClean.csv")
ai.data <- ai.data %>%
filter(!is.na(WHO_Region)) %>%
filter(Country != "Democratic Peoples Republic of Korea (North Korea; DPRK)")
map <- ne_countries(type = 'countries')
one.df <- ai.data%>%
filter(grepl("1. Is there a law that requires routine childhood vaccination in ? ", Query, ignore.case = TRUE)) %>%
data.frame()
two.df <- ai.data %>%
filter(grepl("2. In the event of an emergency, can the government require a citizen to receive a vaccination in?", Query, ignore.case = TRUE)) %>%
data.frame()
one.data <- full_join(one.df, map, by = c("ISO" = "iso_a3_eh"))
two.data <- full_join(two.df, map, by = c("ISO" = "iso_a3_eh"))
one.map <- ggplot() +
geom_sf(data = one.data, aes(fill = Match, geometry = geometry), color = "black", size = 0.2) +
scale_fill_manual(values = c("#41b989", "#ffb896", "#bb5b3f", "#156d7d", "white"),
na.value = "white",
guide = guide_legend(override.aes = list(fill = c("#41b989", "#ffb896", "#bb5b3f", "#156d7d", "white")))) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.title = element_blank()
)
print(one.map) #Childhood vaccination
one.map <- ggplot() +
geom_sf(data = one.data, aes(fill = Match, geometry = geometry), color = "black", size = 0.2) +
scale_fill_manual(values = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white"),
na.value = "white",
guide = guide_legend(override.aes = list(fill = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white")))) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.title = element_blank()
)
print(one.map) #Childhood vaccination
two.map <- ggplot() +
geom_sf(data = two.data, aes(fill = Match, geometry = geometry),color = "black", size = 0.2) +
theme_minimal() +
scale_fill_manual(values = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white"),
na.value = "white",
guide = guide_legend(override.aes = list(fill = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white")))) +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.title = element_blank())
print(two.map) #Emergency vaxx
iso.map <- ggplot() +
geom_sf(data = iso.data, aes(fill = Concordance, geometry = geometry),color = "black", size = 0.2) +
theme_minimal() +
scale_fill_manual(values = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white"),
na.value = "white",
guide = guide_legend(override.aes = list(fill = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white")))) +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.title = element_blank())
print(iso.map) #Iso Q1
iso.map <- ggplot() +
geom_sf(data = iso.data, aes(fill = Concordance, geometry = geometry),color = "black", size = 0.2) +
theme_minimal() +
scale_fill_manual(values = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white"),
na.value = "white",
guide = guide_legend(override.aes = list(fill = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white")))) +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.title = element_blank())
print(iso.map) #Iso Q1
QI.data <- read.csv("QIDataClean.csv")
QI.data <- QI.data %>%
filter(!is.na(WHO_Region))
map <- ne_countries(type = 'countries')
iso.df <- QI.data %>%
filter(grepl("1. What law allows the government to isolate?", Query, ignore.case = TRUE)) %>%
data.frame()
qur.df <- QI.data %>%
filter(grepl("6. What level of government quarantines?", Query, ignore.case = TRUE)) %>%
data.frame()
iso.data <- full_join(iso.df, map, by = c("ISO" = "iso_a3_eh"))
qur.data <- full_join(qur.df, map, by = c("ISO" = "iso_a3_eh"))
iso.map <- ggplot() +
geom_sf(data = iso.data, aes(fill = Concordance, geometry = geometry),color = "black", size = 0.2) +
theme_minimal() +
scale_fill_manual(values = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white"),
na.value = "white",
guide = guide_legend(override.aes = list(fill = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white")))) +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.title = element_blank())
print(iso.map) #Iso Q1
qur.map <- ggplot() +
geom_sf(data = qur.data, aes(fill = Concordance, geometry = geometry),color = "black", size = 0.2) +
theme_minimal() +
scale_fill_manual(values = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white"),
na.value = "white",
guide = guide_legend(override.aes = list(fill = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white")))) +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.title = element_blank())
print(qur.map) #Quar Q6
print(iso.map) #Iso Q1
print(two.map) #Emergency vaxx
iso.map <- ggplot() +
geom_sf(data = iso.data, aes(fill = Concordance, geometry = geometry),color = "black", size = 0.2) +
theme_minimal() +
scale_fill_manual(values = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white"),
na.value = "white",
guide = guide_legend(override.aes = list(fill = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white")))) +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.title = element_blank())
print(iso.map) #Iso Q1
qur.map <- ggplot() +
geom_sf(data = qur.data, aes(fill = Concordance, geometry = geometry),color = "black", size = 0.2) +
theme_minimal() +
scale_fill_manual(values = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white"),
na.value = "white",
guide = guide_legend(override.aes = list(fill = c("#bb5b3f", "#ffb896", "#41b989", "#156d7d", "white")))) +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.title = element_blank())
print(qur.map) #Quar Q6
QI.data <- read.csv("QIDataClean.csv")
QI.data <- QI.data %>%
filter(!is.na(WHO_Region))
View(QI.data)
# List of countries using Chinese as an official language (ISO-3 codes)
chinese_countries_iso <- c("CHN", "SGP")
# List of countries using Arabic as an official language (ISO-3 codes)
arabic_countries_iso <- c("DZA", "BHR", "COM", "DJI", "EGY", "IRQ",
"JOR", "KWT", "LBN", "LBY", "MRT", "MAR",
"OMN", "QAT", "SAU", "SOM", "SDN",
"SYR", "TUN", "ARE", "YEM", "TCD", "ERI")
# List of countries using Russian as an official or national language (ISO-3 codes)
russian_countries_iso <- c("RUS", "BLR", "KAZ", "KGZ", "UKR",
"EST", "LVA", "MDA", "GEO", "AZE",
"ARM", "UZB", "TJK", "TKM")
# List of countries using French as an official language (ISO-3 codes)
french_countries_iso <- c("BEN", "BFA", "BDI", "CMR", "CAF",
"TCD", "COM", "COG", "COD", "DJI",
"GNQ", "GAB", "GIN", "CIV", "MDG",
"MLI", "NER", "RWA", "SEN", "SYC",
"TGO", "BEL", "FRA", "LUX", "MCO",
"CHE", "CAN", "HTI", "DMA", "LCA",
"VUT")
# List of countries using Spanish as an official language (ISO-3 codes)
spanish_countries_iso <- c("ARG", "BOL", "CHL", "COL", "CRI",
"CUB", "DOM", "ECU", "SLV", "GTM",
"HND", "MEX", "NIC", "PAN", "PRY",
"PER", "URY", "VEN", "ESP", "GNQ")
filter_by_iso <- function(data, iso_list) {
data %>%
filter(ISO %in% iso_list) # assuming your ISO column is named 'ISO'
}
# Create the filtered dataframes for each language group
chinese_data <- filter_by_iso(QI.data, chinese_countries_iso)
View(chinese_data)
arabic_data <- filter_by_iso(QI.data, arabic_countries_iso)
russian_data <- filter_by_iso(QI.data, russian_countries_iso)
french_data <- filter_by_iso(QI.data, french_countries_iso)
spanish_data <- filter_by_iso(QI.data, spanish_countries_iso)
View(arabic_data)
calculate_percentage_yes <- function(data) {
total_entries <- nrow(data)
if (total_entries == 0) {
return(NA)  # Handle cases where there are no entries
}
yes_entries <- sum(data$Concordance == "Yes", na.rm = TRUE)
percentage_yes <- (yes_entries / total_entries) * 100
return(percentage_yes)
}
# Calculate the percentage for each language group dataframe
chinese_percentage_yes <- calculate_percentage_yes(chinese_data)
arabic_percentage_yes <- calculate_percentage_yes(arabic_data)
russian_percentage_yes <- calculate_percentage_yes(russian_data)
french_percentage_yes <- calculate_percentage_yes(french_data)
spanish_percentage_yes <- calculate_percentage_yes(spanish_data)
cat("Percentage of 'Yes' in Concordance for Chinese-speaking countries: ", chinese_percentage_yes, "%\n")
cat("Percentage of 'Yes' in Concordance for Arabic-speaking countries: ", arabic_percentage_yes, "%\n")
cat("Percentage of 'Yes' in Concordance for Russian-speaking countries: ", russian_percentage_yes, "%\n")
cat("Percentage of 'Yes' in Concordance for French-speaking countries: ", french_percentage_yes, "%\n")
cat("Percentage of 'Yes' in Concordance for Spanish-speaking countries: ", spanish_percentage_yes, "%\n")
QI.data <- read.csv("QIDataClean.csv")
QI.data <- QI.data %>%
filter(!is.na(WHO_Region))
AMP.cited <- QI.data %>%
filter(AMP.Cited != "checked")
View(AMP.cited)
QI.data <- read.csv("QIDataClean.csv")
QI.data <- QI.data %>%
filter(!is.na(WHO_Region))
AMP.cited <- QI.data %>%
filter(AMP.Cited != "")
View(AMP.cited)
a.df <- AMP.cited %>%
filter(grepl("Major difference", Difference.after.excluding.AMP, ignore.case = TRUE)) %>%
data.frame()
View(a.df)
no.major.diff.count <- AMP.cited %>%
filter(Difference.after.excluding.AMP == "No major difference") %>%
count()
View(no.major.diff.count)
View(percentage.by.region)
#load data
QI.data <- read.csv("QIDataClean.csv")
QI.data <- QI.data %>%
filter(!is.na(WHO_Region))
data_for_plot <- QI.data %>%
group_by(WHO_Region, Concordance) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100) %>%
ungroup()
View(data_for_plot)
data_for_rory <- QI.data %>%
group_by(Concordance) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100) %>%
ungroup()
View(data_for_rory)
#load data
QI.data <- read.csv("QIDataClean.csv")
QI.data <- QI.data %>%
filter(!is.na(WHO_Region))
# List of English-speaking countries
english_countries <- c(
"Antigua and Barbuda", "Australia", "Bahamas", "Barbados", "Belize",
"Bhutan", "Botswana", "Brunei Darussalam", "Cameroon", "Canada",
"Chinese Taipei (Taiwan; Republic of China; ROC)", "Cook Islands", "Dominica",
"Eswatini (Swaziland)", "Fiji", "Gambia (Republic of The)", "Ghana", "Grenada",
"Guyana", "India", "Ireland", "Jamaica", "Kenya", "Kiribati", "Lesotho",
"Liberia", "Malawi", "Malaysia", "Malta", "Marshall Islands", "Mauritius",
"Micronesia (Federated States of Micronesia)", "Namibia", "Nauru", "Nepal",
"New Zealand", "Nigeria", "Niue", "Pakistan", "Palau", "Papua New Guinea",
"Philippines", "Saint Kitts and Nevis (St Kitts and Nevis)", "Saint Lucia (St Lucia)",
"Saint Vincent and the Grenadines (St Vincent and the Grenadines)", "Samoa",
"Seychelles", "Sierra Leone", "Singapore", "Solomon Islands", "South Africa",
"Sri Lanka", "Tonga", "Trinidad and Tobago", "Tuvalu", "Uganda",
"United Kingdom of Great Britain and Northern Ireland (UK)", "United Republic of Tanzania",
"United States of America (USA)", "Vanuatu", "Zambia", "Zimbabwe"
)
# Add the 'English' column to QIData
QI.data <- QI.data %>%
mutate(English = ifelse(Country %in% english_countries, "YES", "NO"))
gross.percentage.yes <- mean(QI.data$Concordance == "Yes") * 100
print(gross.percentage.yes)
qi.filtered.percentage.by.region <- QI.data %>%
group_by(WHO_Region) %>%
summarize(percentage_yes = mean(Match == "Yes") * 100)
english_countries_yes <- QI.data %>%
filter(English == "YES")
english_countries_no <- QI.data %>%
filter(English == "NO")
View(french_data)
